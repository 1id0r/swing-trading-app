// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id          String @id @default(cuid())
  firebaseUid String @unique // Firebase UID
  email       String @unique
  displayName String
  
  // Relations
  trades      Trade[]
  positions   Position[]
  settings    UserSettings?
  alerts      PriceAlert[]
  performance MonthlyPerformance[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// User settings for the app
model UserSettings {
  id              String  @id @default(cuid())
  userId          String  @unique
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  defaultCurrency String  @default("USD")
  displayCurrency String  @default("USD")
  taxRate         Float   @default(25.0) // Capital gains tax percentage
  defaultFee      Float   @default(9.99) // Default commission
  dateFormat      String  @default("MM/dd/yyyy")
  theme           String  @default("dark")
  
  // Notification preferences
  notifyTrades       Boolean @default(true)
  notifyPriceAlerts  Boolean @default(false)
  notifyMonthly      Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_settings")
}

// Individual trades (buy/sell transactions)
model Trade {
  id           String   @id @default(cuid())
  userId       String   // Foreign key to User
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  ticker       String   // Stock symbol (AAPL, MSFT)
  company      String   // Company name (Apple Inc.)
  logo         String?  // Company logo URL
  action       String   // "BUY" or "SELL"
  shares       Int      // Number of shares
  pricePerShare Float   // Price per share at time of trade
  fee          Float    @default(0) // Commission/trading fee
  currency     String   @default("USD")
  date         DateTime // Trade date
  
  // Calculated fields
  totalValue   Float    // shares * pricePerShare
  totalCost    Float    // totalValue + fee (for buys) or totalValue - fee (for sells)
  
  // P&L tracking (only for sells)
  costBasis    Float?   // FIFO cost basis for this sell
  grossProfit  Float?   // Before taxes and fees
  netProfit    Float?   // After taxes and fees
  taxAmount    Float?   // Capital gains tax paid
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([ticker])
  @@index([date])
  @@index([action])
  @@map("trades")
}

// Current stock positions (aggregated from trades)
model Position {
  id            String   @id @default(cuid())
  userId        String   // Foreign key to User
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  ticker        String   // Stock symbol
  company       String   // Company name
  logo          String?  // Company logo URL
  currency      String   @default("USD")
  
  // Position data
  totalShares   Int      // Current shares owned
  averagePrice  Float    // Average cost basis (FIFO)
  totalCost     Float    // Total amount invested
  
  // Market data (updated periodically)
  currentPrice     Float?   // Current market price
  lastPriceUpdate  DateTime? // When price was last updated
  
  // Calculated P&L
  unrealizedPnL       Float?   // Current profit/loss
  unrealizedPnLPercent Float?  // P&L percentage
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, ticker])
  @@index([userId])
  @@map("positions")
}

// Price alerts for notifications
model PriceAlert {
  id            String   @id @default(cuid())
  userId        String   // Foreign key to User
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  ticker        String   // Stock symbol
  company       String   // Company name
  targetPrice   Float    // Price to alert at
  condition     String   // "ABOVE" or "BELOW"
  isActive      Boolean  @default(true)
  
  // Alert history
  triggeredAt   DateTime? // When alert was triggered
  currentPrice  Float?    // Price when triggered
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([ticker])
  @@map("price_alerts")
}

// Monthly performance tracking
model MonthlyPerformance {
  id               String   @id @default(cuid())
  userId           String   // Foreign key to User
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  year             Int      // 2024
  month            Int      // 1-12
  
  // Performance metrics
  totalTrades      Int      @default(0)
  buyTrades        Int      @default(0)
  sellTrades       Int      @default(0)
  
  totalVolume      Float    @default(0) // Total trade volume
  totalFees        Float    @default(0) // Total fees paid
  
  realizedPnL      Float    @default(0) // Profit/loss from sells
  unrealizedPnL    Float    @default(0) // Current position values
  
  winningTrades    Int      @default(0)
  losingTrades     Int      @default(0)
  winRate          Float    @default(0) // Percentage
  
  portfolioValue   Float    @default(0) // End of month value
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, year, month])
  @@index([userId])
  @@map("monthly_performance")
}